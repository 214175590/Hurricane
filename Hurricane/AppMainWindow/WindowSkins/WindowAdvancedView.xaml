<UserControl x:Class="Hurricane.AppMainWindow.WindowSkins.WindowAdvancedView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:viewmodels="clr-namespace:Hurricane.ViewModels"
             xmlns:converter="clr-namespace:Hurricane.Extensions.Converter"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:wpfsvl="clr-namespace:WPFSoundVisualizationLib;assembly=WPFSoundVisualizationLib"
             xmlns:extensions="clr-namespace:Hurricane.Extensions"
             xmlns:jas="clr-namespace:Hurricane.Resources.Styles.DragDropListView.ServiceProviders.UI"
             xmlns:ctrl="clr-namespace:Hurricane.Extensions.ListViewLayoutManager"
             xmlns:userControls="clr-namespace:Hurricane.Views.UserControls"
             mc:Ignorable="d"
             d:DesignHeight="500" d:DesignWidth="850" DataContext="{x:Static viewmodels:MainViewModel.Instance}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Styles/AdvancedTimelineSlider.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/RoundButtons.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/FavoriteToggleButton.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <converter:FormatTimespan x:Key="FormatTimespan"/>
            <converter:FalseOnEmptyString x:Key="FalseOnEmptyString"/>
            <converter:CollapsedOnNullValue x:Key="CollapsedOnNullValue"/>
            <Style TargetType="TextBlock" x:Key="AristTextBlock">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.CurrentTrack.Artist,Converter={StaticResource FalseOnEmptyString}}" Value="False">
                        <Setter Property="Text" Value="{DynamicResource NoArtist}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.CurrentTrack.Artist,Converter={StaticResource FalseOnEmptyString}}" Value="True">
                        <Setter Property="Text" Value="{Binding MusicManager.CSCoreEngine.CurrentTrack.Artist}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="35"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <Grid MouseLeftButtonDown="Grid_MouseLeftButtonDown" MouseLeftButtonUp="Grid_MouseLeftButtonUp" Background="{DynamicResource WhiteColorBrush}">
            <TextBlock Text="Hurricane" Foreground="#FFAAAAAA" FontSize="16" VerticalAlignment="Center" HorizontalAlignment="Center"/>
        </Grid>
        <TabControl Grid.Row="1">
            <TabItem Header="{DynamicResource Playlists}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"/>
                        <ColumnDefinition Width="1"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="230"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Menu Grid.ColumnSpan="3">
                        <MenuItem Header="{DynamicResource Playlist}">
                            <MenuItem Header="{DynamicResource NewPlaylist}" Command="{Binding AddNewPlaylist}"/>
                            <Separator />
                            <MenuItem Header="{DynamicResource RemovePlaylist}" Command="{Binding RemovePlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}"/>
                            <MenuItem Header="{DynamicResource RenamePlaylist}" Command="{Binding RenamePlaylist}"  IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}"/>
                        </MenuItem>
                        <MenuItem Header="{DynamicResource Tracks}">
                            <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding AddFilesToPlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}"/>
                            <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding AddFolderToPlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}"/>
                            <Separator />
                            <MenuItem Header="{DynamicResource ReloadTrackInfo}" Command="{Binding ReloadTrackInformation}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}"/>
                            <MenuItem Header="{DynamicResource RemoveTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem Header="{DynamicResource RemoveMissingTracks}" Command="{Binding RemoveMissingTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.ContainsMissingTracks}"/>
                                <MenuItem Header="{DynamicResource RemoveDuplicates}" Command="{Binding RemoveDuplicateTracks}"/>
                                <Separator />
                                <MenuItem Header="{DynamicResource RemoveAllTracks}" Command="{Binding ClearSelectedPlaylist}"/>
                            </MenuItem>
                        </MenuItem>
                        <MenuItem Header="{DynamicResource Favorites}" Command="{Binding MusicManager.Commands.OpenFavorites}"/>
                    </Menu>
                    <TextBox Grid.Column="5" Margin="0,0,10,0" x:Name="txtSearch" VerticalAlignment="Center" controls:TextBoxHelper.ClearTextButton="True" HorizontalAlignment="Right" Width="200" controls:TextBoxHelper.Watermark="{StaticResource Search}" Text="{Binding MusicManager.SelectedPlaylist.SearchText,UpdateSourceTrigger=PropertyChanged}"/>
                    <ListBox Grid.Row="1" ItemsSource="{Binding MusicManager.Playlists}" DisplayMemberPath="Name" SelectedItem="{Binding MusicManager.SelectedPlaylist}" Margin="5">
                        <ListBox.InputBindings>
                            <KeyBinding Key="Delete" Command="{Binding RemovePlaylist}"/>
                        </ListBox.InputBindings>
                        <ListBox.Resources>
                            <ContextMenu x:Key="contexmenu">
                                <MenuItem Header="{DynamicResource RemovePlaylist}" Command="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=DataContext.RemovePlaylist}"/>
                                <MenuItem Header="{DynamicResource RenamePlaylist}" Command="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=DataContext.RenamePlaylist}"/>
                            </ContextMenu>
                        </ListBox.Resources>
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource MetroListBoxItem}">
                                <Setter Property="ContextMenu" Value="{StaticResource contexmenu}"/>
                            </Style>
                        </ListBox.ItemContainerStyle>
                    </ListBox>
                    <Rectangle Grid.Column="1" Width="1" Fill="Gray" Grid.Row="1"/>
                    <Grid Grid.Column="2" Margin="5" x:Name="gridplaylist" Grid.Row="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <extensions:AnimatedListView SelectionMode="Extended" Grid.Row="1" ItemsSource="{Binding MusicManager.SelectedPlaylist.ViewSource}" SelectedItem="{Binding MusicManager.SelectedTrack}" BorderThickness="0" Margin="5,0,5,0" SelectionChanged="ListView_SelectionChanged"
                                  DragEnter="ListView_DragEnter" Drop="ListView_Drop" x:Name="listview" ctrl:ListViewLayoutManager.Enabled="True">
                            <ListView.Resources>
                                <ContextMenu x:Key="ItemContextMenu" DataContext="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext}">
                                    <MenuItem Header="{DynamicResource Play}" Command="{Binding MusicManager.Commands.PlaySelectedTrack}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="Enter"/>
                                    <Separator />
                                    <MenuItem Header="{DynamicResource AddTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                        <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding AddFilesToPlaylist}" InputGestureText="{DynamicResource Ins}"/>
                                        <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding AddFolderToPlaylist}" InputGestureText="{DynamicResource CtrlIns}"/>
                                    </MenuItem>
                                    <Separator />
                                    <MenuItem Header="{DynamicResource Queue}">
                                        <MenuItem Header="{DynamicResource AddToQueue}" Command="{Binding MusicManager.Commands.AddTrackToQueue}" InputGestureText="Q"/>
                                        <MenuItem Header="{DynamicResource RemoveFromQueue}" Command="{Binding MusicManager.Commands.RemoveFromQueue}" InputGestureText="Alt+Q"/>
                                        <MenuItem Header="{DynamicResource ClearQueue}" Command="{Binding MusicManager.Commands.ClearQueue}" IsEnabled="{Binding MusicManager.Queue.HasTracks}"/>
                                        <Separator />
                                        <MenuItem Header="{DynamicResource QueueManager}" Command="{Binding OpenQueueManager}" InputGestureText="{DynamicResource CtrlQ}"/>
                                    </MenuItem>
                                    <Separator />
                                    <MenuItem Header="{DynamicResource TrackInformation}" Command="{Binding OpenTrackInformation}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="F4"/>
                                    <MenuItem Header="{DynamicResource TagEditor}" Command="{Binding OpenTagEditor}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="F3"/>
                                    <MenuItem Header="{DynamicResource FileLocation}" Command="{Binding MusicManager.Commands.OpenTrackLocation}" InputGestureText="Alt+O" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}"/>
                                    <Separator />
                                    <MenuItem Header="{DynamicResource Remove}" Command="{Binding RemoveSelectedTracks}" InputGestureText="{DynamicResource Del}"/>
                                </ContextMenu>
                                <Style TargetType="TextBlock" x:Key="ListTextBlockStyle">
                                    <Setter Property="Foreground" Value="{DynamicResource BlackBrush}"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="False"/>
                                                <Condition Binding="{Binding IsPlaying}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Foreground" Value="{DynamicResource NormalColorBrush}"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                            <Setter Property="Foreground" Value="{DynamicResource AccentSelectedColorBrush}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type GridViewColumnHeader}">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </Style>
                                <converter:TrueFalseValueConverter x:Key="TrueFalseValueConverter" FalseValue="#FFB4B4B4" TrueValue="White"/>
                            </ListView.Resources>
                            <ListView.InputBindings>
                                <KeyBinding Key="Delete" Command="{Binding RemoveSelectedTracks}" CommandParameter="{Binding ElementName=listview,Path=SelectedItems}"/>
                                <KeyBinding Key="Enter" Command="{Binding MusicManager.Commands.PlaySelectedTrack}"/>
                                <KeyBinding Key="O" Modifiers="Alt" Command="{Binding MusicManager.Commands.OpenTrackLocation}"/>
                                <KeyBinding Key="Space" Command="{Binding MusicManager.Commands.TogglePlayPause}"/>
                                <KeyBinding Key="Q" Command="{Binding MusicManager.Commands.AddTrackToQueue}"/>
                                <KeyBinding Key="Q" Modifiers="Alt" Command="{Binding MusicManager.Commands.RemoveFromQueue}"/>
                                <KeyBinding Key="Q" Modifiers="Control" Command="{Binding OpenQueueManager}"/>
                                <KeyBinding Key="Insert" Command="{Binding AddFilesToPlaylist}"/>
                                <KeyBinding Key="Insert" Modifiers="Control" Command="{Binding AddFolderToPlaylist}"/>
                                <KeyBinding Key="F4" Command="{Binding OpenTrackInformation}"/>
                                <KeyBinding Key="F3" Command="{Binding OpenTagEditor}"/>
                            </ListView.InputBindings>
                            <ListView.Style>
                                <Style TargetType="{x:Type ListView}">
                                    <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
                                    <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling"/>
                                </Style>
                            </ListView.Style>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem" BasedOn="{StaticResource MetroListViewItem}">
                                    <EventSetter Event="MouseDoubleClick" Handler="ListViewItem_MouseDoubleClick"></EventSetter>
                                    <Setter Property="Padding" Value="0,4" />
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                    <Setter Property="Border.BorderThickness" Value="0,0,0,0.5" />
                                    <Setter Property="Border.BorderBrush" Value="LightGray" />
                                    <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"/>
                                    <Setter Property="LayoutTransform">
                                        <Setter.Value>
                                            <ScaleTransform x:Name="transform" />
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <Trigger Property="jas:ListViewItemDragState.IsBeingDragged" Value="True">
                                            <Setter Property="FontWeight" Value="DemiBold" />
                                        </Trigger>
                                        <Trigger Property="jas:ListViewItemDragState.IsUnderDragCursor" Value="True">
                                            <Setter Property="Background" Value="#7FD3D3D3" />
                                        </Trigger>
                                        <DataTrigger Binding="{Binding TrackExists}" Value="False">
                                            <Setter Property="Background" Value="#FFF2F2F2"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsRemoving}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ThicknessAnimation To="-40,0,40,0" Duration="0:0:0.5" Storyboard.TargetProperty="Margin"/>
                                                        <DoubleAnimation To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsAdded}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ThicknessAnimation From="-40,0,40,0" To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Margin" FillBehavior="Stop"/>
                                                        <DoubleAnimation From="0" To="1" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity" FillBehavior="Stop"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Width="27">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid Margin="5,0,0,0" Width="10">
                                                    <TextBlock Text="{Binding QueueID}" HorizontalAlignment="Center"/>
                                                    <!--We dont have to hide it because it gets automatically null-->
                                                    <Viewbox Width="12" Height="12">
                                                        <Path Data="{StaticResource VectorPlay}">
                                                            <Path.Style>
                                                                <Style TargetType="Path">
                                                                    <Setter Property="Fill" Value="{DynamicResource AccentColorBrush}"/>
                                                                    <Style.Triggers>
                                                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                                            <Setter Property="Fill" Value="White"/>
                                                                        </DataTrigger>
                                                                    </Style.Triggers>
                                                                </Style>
                                                            </Path.Style>
                                                        </Path>
                                                        <Viewbox.Style>
                                                            <Style TargetType="Viewbox">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                                <Style.Triggers>
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition Binding="{Binding IsPlaying}" Value="True"/>
                                                                            <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.MusicManager.CSCoreEngine.IsPlaying}" Value="True"/>
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                        <MultiDataTrigger.EnterActions>
                                                                            <BeginStoryboard>
                                                                                <Storyboard>
                                                                                    <ThicknessAnimation From="-5,0,5,0" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="Margin"/>
                                                                                    <DoubleAnimation From="0.5" To="1" Duration="0:0:0.2" Storyboard.TargetProperty="Opacity"/>
                                                                                </Storyboard>
                                                                            </BeginStoryboard>
                                                                        </MultiDataTrigger.EnterActions>
                                                                    </MultiDataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Viewbox.Style>
                                                    </Viewbox>
                                                    <Viewbox Width="12" Height="12">
                                                        <Path Data="{StaticResource VectorPause}"/>
                                                        <Viewbox.Resources>
                                                            <Style TargetType="Path">
                                                                <Setter Property="Fill" Value="{DynamicResource AccentColorBrush}"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}, Path=IsSelected}" Value="True">
                                                                        <Setter Property="Fill" Value="White"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Viewbox.Resources>
                                                        <Viewbox.Style>
                                                            <Style TargetType="Viewbox">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                                <Style.Triggers>
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition Binding="{Binding IsPlaying}" Value="True"/>
                                                                            <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.MusicManager.CSCoreEngine.IsPlaying}" Value="False"/>
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter Property="Visibility" Value="Visible"/>
                                                                        <MultiDataTrigger.EnterActions>
                                                                            <BeginStoryboard>
                                                                                <Storyboard>
                                                                                    <DoubleAnimation From="0.8" To="1" Duration="0:0:0.3" Storyboard.TargetProperty="Opacity"/>
                                                                                </Storyboard>
                                                                            </BeginStoryboard>
                                                                        </MultiDataTrigger.EnterActions>
                                                                    </MultiDataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Viewbox.Style>
                                                    </Viewbox>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn ctrl:ProportionalColumn.Width="1" Header="hallo">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid x:Name="Grid" Margin="10,0,0,0">
                                                    <TextBlock Text="{Binding DisplayText}" Style="{StaticResource ListTextBlockStyle}" VerticalAlignment="Center" TextTrimming="CharacterEllipsis"/>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="80">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <ToggleButton Background="{DynamicResource BlackBrush}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem},Path=IsSelected,Converter={StaticResource TrueFalseValueConverter}}" Style="{StaticResource FavoriteToggleButton}" Height="16" Width="16" HorizontalAlignment="Left" Margin="10,0,0,0" IsChecked="{Binding IsFavorite}"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="60">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Duration}" Style="{StaticResource ListTextBlockStyle}" VerticalAlignment="Center" Margin="0,0,10,0"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </extensions:AnimatedListView>
                    </Grid>
                    <Grid Grid.Column="3" Grid.Row="1" x:Name="girdcover" Visibility="{Binding MusicManager.CSCoreEngine.CurrentTrack,Converter={StaticResource CollapsedOnNullValue}}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.InputBindings>
                            <MouseBinding MouseAction="LeftClick" Command="{Binding MusicManager.Commands.JumpToPlayingTrack}"/>
                        </Grid.InputBindings>
                        <Rectangle Width="1" Fill="Gray"/>
                        <StackPanel Orientation="Vertical" Margin="5" Grid.Column="1">
                            <extensions:TrackImagePreseter Track="{Binding MusicManager.CSCoreEngine.CurrentTrack}" Width="200" Height="200"/>
                            <extensions:AnimatedStackPanel AnimationInterval="300" UpdateObject="{Binding MusicManager.CSCoreEngine.CurrentTrack}" Orientation="Vertical" Margin="10,10,0,0">
                                <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Title}" Foreground="{DynamicResource NormalColorBrush}" TextWrapping="Wrap"/>
                                <TextBlock FontSize="22" FontFamily="Segoe UI Light" Style="{StaticResource AristTextBlock}" TextWrapping="Wrap"/>
                                <ToggleButton Foreground="#FFB4B4B4" Background="{DynamicResource NormalColorBrush}" Style="{StaticResource FavoriteToggleButton}" Height="16" Width="16" HorizontalAlignment="Left" Margin="0,10,0,10" IsChecked="{Binding MusicManager.CSCoreEngine.CurrentTrack.IsFavorite}"/>
                                <StackPanel Orientation="Horizontal" Margin="0,30,0,0">
                                    <TextBlock Text="{DynamicResource Bitrate}"/>
                                    <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.kbps}" Foreground="{DynamicResource NormalColorBrush}" Margin="5,0,0,0"/>
                                    <TextBlock Text=" kbps" Foreground="{DynamicResource NormalColorBrush}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                                    <TextBlock Text="{DynamicResource Samplerate}"/>
                                    <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.kHz}" Foreground="{DynamicResource NormalColorBrush}" Margin="5,0,0,0"/>
                                    <TextBlock Text=" kHz" Foreground="{DynamicResource NormalColorBrush}"/>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal" Margin="0,5,0,0">
                                    <TextBlock Text="{DynamicResource Format}"/>
                                    <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Extension}" Foreground="{DynamicResource NormalColorBrush}" Margin="5,0,0,0"/>
                                </StackPanel>
                            </extensions:AnimatedStackPanel>
                        </StackPanel>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="{DynamicResource NowPlaying}">
                <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="50"/>
                        <ColumnDefinition Width="500"/>
                    </Grid.ColumnDefinitions>
                    <extensions:TrackImagePreseter Track="{Binding MusicManager.CSCoreEngine.CurrentTrack}" Width="280" Height="280" />
                    <Grid Grid.Column="2"  Margin="0,25,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <extensions:AnimatedStackPanel AnimationInterval="300" UpdateObject="{Binding MusicManager.CSCoreEngine.CurrentTrack}" Orientation="Vertical">
                            <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Title}" Foreground="{DynamicResource NormalColorBrush}" FontSize="14"/>
                            <TextBlock FontSize="32" Margin="0,5,0,0" FontFamily="Segoe UI Light" Style="{StaticResource AristTextBlock}" TextWrapping="Wrap"/>
                            <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack.Album}" Margin="0,5,0,0" FontSize="18" FontFamily="Segoe UI Light" Foreground="DarkGray">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <ToggleButton Foreground="#FFB4B4B4" Background="{DynamicResource NormalColorBrush}" Style="{StaticResource FavoriteToggleButton}" Height="18" Width="18" HorizontalAlignment="Left" Margin="0,10,0,10" IsChecked="{Binding MusicManager.CSCoreEngine.CurrentTrack.IsFavorite}"/>
                        </extensions:AnimatedStackPanel>
                        <wpfsvl:SpectrumAnalyzer x:Name="spektrum1" Grid.Row="1" BarCount="50" Height="100" VerticalAlignment="Bottom" Focusable="False" Margin="0,0,0,10">
                            <wpfsvl:SpectrumAnalyzer.Style>
                                <Style TargetType="{x:Type wpfsvl:SpectrumAnalyzer}">
                                    <Setter Property="Opacity" Value="0"/>
                                    <Setter Property="BarStyle">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type Rectangle}">
                                                <Setter Property="Fill" Value="LightGray"/>
                                                <Setter Property="StrokeDashArray" Value="4 4"/>
                                                <Setter Property="StrokeThickness" Value="1"/>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="PeakStyle">
                                        <Setter.Value>
                                            <Style TargetType="{x:Type Rectangle}">
                                                <Setter Property="Fill" Value="{DynamicResource SpectrumAnalyzerBrush}"/>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation To="1" Storyboard.TargetProperty="Opacity"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation To="0" BeginTime="0:0:1" Storyboard.TargetProperty="Opacity"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </wpfsvl:SpectrumAnalyzer.Style>
                        </wpfsvl:SpectrumAnalyzer>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="{DynamicResource Settings}" xmlns:settingsconverter="clr-namespace:Hurricane.Settings.Converter" xmlns:tkt="http://schemas.xceed.com/wpf/xaml/toolkit">
                <Grid DataContext="{x:Static viewmodels:SettingsViewModel.Instance}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="25"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.ColumnSpan="2">
                        <Button Content="{DynamicResource Apply}" HorizontalAlignment="Right" Width="150" Margin="0,0,10,0" Command="{Binding ApplyChanges}" IsEnabled="{Binding CanApply}"/>
                    </Grid>
                    <userControls:SettingsView Grid.Row="1"/>
                </Grid>
            </TabItem>
        </TabControl>
        <Grid Grid.Row="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Slider Maximum="{Binding MusicManager.CSCoreEngine.TrackLength}" Value="{Binding MusicManager.CSCoreEngine.Position}" Style="{StaticResource AdvancedTimelineSlider}" IsMoveToPointEnabled="True"/>
            <Grid Grid.Row="1">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,5,0,10">
                    <ToggleButton Height="32" Width="32" Background="White" Style="{StaticResource RoundToggleButton}" Margin="0,0,9,0" IsChecked="{Binding MusicManager.IsShuffleEnabled}">
                        <Grid>
                            <Viewbox Width="12" Height="12" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Grid>
                                    <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=Foreground}" Data="{StaticResource VectorShuffle}"/>
                                </Grid>
                            </Viewbox>
                        </Grid>
                    </ToggleButton>
                    <Button Style="{StaticResource RoundButton}" Height="32" Width="32" Background="White" Command="{Binding MusicManager.Commands.GoBackward}">
                        <Grid>
                            <Viewbox Width="12" Height="12" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,1,0">
                                <Path Data="{StaticResource VectorFastBackward}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                            </Viewbox>
                        </Grid>
                    </Button>
                    <Button Style="{StaticResource RoundButton}" Width="45" Height="45" Command="{Binding MusicManager.Commands.TogglePlayPause}" Margin="9,0,9,0">
                        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Viewbox Width="16" Height="16" Stretch="Uniform" Margin="3,0,0,0">
                                <Path Data="{StaticResource VectorPlay}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                                <Viewbox.Resources>
                                    <Style TargetType="{x:Type Viewbox}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="True">
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                    <Style TargetType="Path">
                                        <Setter Property="Fill" Value="Black"/>
                                    </Style>
                                </Viewbox.Resources>
                            </Viewbox>
                            <Viewbox Width="13" Height="15" Stretch="Fill">
                                <Path Data="{StaticResource VectorPause}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                                <Viewbox.Resources>
                                    <Style TargetType="{x:Type Viewbox}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="False">
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                    <Style TargetType="Path">
                                        <Setter Property="Fill" Value="Black"/>
                                    </Style>
                                </Viewbox.Resources>
                            </Viewbox>
                        </Grid>
                    </Button>
                    <Button Style="{StaticResource RoundButton}" Height="32" Width="32" Background="White" Command="{Binding MusicManager.Commands.GoForward}">
                        <Grid>
                            <Viewbox Width="12" Height="12" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="1,0,0,0">
                                <Path Data="{StaticResource VectorFastForward}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                            </Viewbox>
                        </Grid>
                    </Button>
                    <ToggleButton Height="32" Width="32" Background="White" Style="{StaticResource RoundToggleButton}" Margin="9,0,0,0" IsChecked="{Binding MusicManager.IsLoopEnabled}">
                        <Grid>
                            <Viewbox Width="12" Height="12" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Path Fill="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=Foreground}" Data="{StaticResource VectorRepeat}"/>
                            </Viewbox>
                        </Grid>
                    </ToggleButton>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="20,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center">
                    <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrackPosition,Converter={StaticResource FormatTimespan}}"/>
                    <TextBlock Text="/" Margin="10,0,10,0"/>
                    <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrackLength,Converter={StaticResource FormatTimespan}}"/>
                </StackPanel>
                <DockPanel HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,20,0">
                    <DockPanel.Resources>
                        <converter:VolumeToImage x:Key="VolumeToImage"/>
                    </DockPanel.Resources>
                    <Image Source="{Binding ElementName=volumeslider,Path=Value,Converter={StaticResource VolumeToImage}}" Width="24" Height="24"/>
                    <Slider x:Name="volumeslider" Maximum="1" Minimum="0" IsMoveToPointEnabled="True" Style="{StaticResource AdvancedTimelineSlider}" VerticalAlignment="Center" LargeChange="0.1" Value="{Binding MusicManager.CSCoreEngine.Volume}"/>
                </DockPanel>
            </Grid>
        </Grid>
        <Button Background="{DynamicResource NormalColorBrush}" Visibility="{Binding Updater.UpdateFound,Converter={StaticResource BooleanToVisibilityConverter}}" Height="30" Command="{Binding OpenUpdater}" Margin="10,40,15,10" Grid.RowSpan="2" VerticalAlignment="Top" HorizontalAlignment="Right">
            <Button.Resources>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
            </Button.Resources>

            <TextBlock Text="{DynamicResource NewUpdateAvailable}" Foreground="White"/>
        </Button>
    </Grid>
</UserControl>
