<UserControl x:Class="Hurricane.AppMainWindow.WindowSkins.WindowSmartView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:viewmodels="clr-namespace:Hurricane.ViewModels"
             xmlns:wpfsvl="clr-namespace:WPFSoundVisualizationLib;assembly=WPFSoundVisualizationLib"
             xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
             xmlns:converter="clr-namespace:Hurricane.Extensions.Converter"
             xmlns:ex="clr-namespace:Hurricane.Extensions"
             xmlns:track="clr-namespace:Hurricane.Music.Track"
             DataContext="{x:Static viewmodels:MainViewModel.Instance}" Width="300" MinWidth="300" MaxWidth="300" MinHeight="400">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Styles/TimelineSlider.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/VolumeSlider.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/MetroWindowStyle.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/FavoriteToggleButton.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/RoundButtons.xaml"/>
                <ResourceDictionary Source="/Resources/Styles/VectorMenuItem.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <DockPanel LastChildFill="True">
            <Border x:Name="titlebar" Margin="0,0,0,0" Height="40" DockPanel.Dock="Top" Background="Transparent" MouseLeftButtonDown="titlebar_MouseLeftButtonDown" MouseLeftButtonUp="titlebar_MouseLeftButtonUp">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Orientation="Horizontal">
                        <Button Width="28" Height="28" Focusable="False" Margin="5,2,0,0" Command="{Binding OpenSettings}" Background="{StaticResource WhiteBrush}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Button">
                                                <Grid Background="{StaticResource WhiteBrush}">
                                                    <Path x:Name="img" Stretch="UniformToFill" Stroke="{StaticResource BlackBrush}" Width="20" Height="20" Data="M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="img" Property="Stroke" Value="{StaticResource GrayBrush5}"/>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter TargetName="img" Property="Stroke" Value="{StaticResource GrayBrush7}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Button.Style>
                        </Button>
                    </StackPanel>
                    <TextBlock Margin="10,10,0,10" VerticalAlignment="Center" 
                                                       Foreground="#FFAAAAAA" TextWrapping="NoWrap" 
                                                       Text="Hurricane" FontSize="16" HorizontalAlignment="Center" Grid.ColumnSpan="2"/>
                    <Button x:Name="btnClose" Grid.Column="1"
                                                    VerticalAlignment="Center" Margin="5,0,10,0"
                                                    Height="20" Width="20" 
                                                    Style="{StaticResource WindowButtonStyle}"
                                                    Click="btnClose_Click"/>
                </Grid>
            </Border>
        </DockPanel>
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.Resources>
                <converter:CollapsedOnNullValue x:Key="CollapsedOnNullValue"/>
            </Grid.Resources>
            <Grid>
                <Button Background="{StaticResource NormalColorBrush}" Height="30" Visibility="{Binding Updater.UpdateFound,Converter={StaticResource BooleanToVisibilityConverter}}" ex:VisibilityAnimation.AnimationType="Fade" Command="{Binding OpenUpdater}">
                    <Button.Resources>
                        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatButton.xaml" />
                    </Button.Resources>

                    <TextBlock Text="{DynamicResource NewUpdateAvailable}" Foreground="White"/>
                </Button>
            </Grid>
            <DockPanel Grid.Row="1" Margin="5,5,0,0" Visibility="{Binding MusicManager.CSCoreEngine.CurrentTrack,Converter={StaticResource CollapsedOnNullValue}}">
                <Polygon Points="0,0 8,5, 0,10" Stroke="{StaticResource AccentColorBrush}" StrokeThickness="2" VerticalAlignment="Center" Margin="0,2,0,0" x:Name="polyplay"/>
                <Grid Margin="5,0,5,0" VerticalAlignment="Center" MouseEnter="Grid_MouseEnter" MouseLeave="Grid_MouseLeave" Background="{StaticResource WhiteBrush}">
                    <TextBlock Text="{Binding MusicManager.CSCoreEngine.CurrentTrack}" TextTrimming="CharacterEllipsis" x:Name="txtCurrentTrack" Margin="1" Foreground="{StaticResource BlackBrush}">
                        <TextBlock.InputBindings>
                            <MouseBinding Command="{Binding MusicManager.Commands.JumpToPlayingTrack}" MouseAction="LeftClick"/>
                        </TextBlock.InputBindings>
                    </TextBlock>
                </Grid>
            </DockPanel>
            <StackPanel Grid.Row="2" Margin="5">
                <Grid Margin="0,0,0,10">
                    <wpfsvl:SpectrumAnalyzer x:Name="SpectrumAnalyzer" BarCount="32">
                        <wpfsvl:SpectrumAnalyzer.Style>
                            <Style TargetType="{x:Type wpfsvl:SpectrumAnalyzer}">
                                <Setter Property="Opacity" Value="0"/>
                                <Setter Property="BarStyle">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type Rectangle}">
                                            <Setter Property="Fill" Value="{DynamicResource SpectrumAnalyzerBrush}"/>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="PeakStyle">
                                    <Setter.Value>
                                        <Style TargetType="{x:Type Rectangle}">
                                            <Setter Property="Fill" Value="{DynamicResource SpectrumAnalyzerBrush}"/>
                                        </Style>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation To="1" Storyboard.TargetProperty="Opacity"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation To="0" BeginTime="0:0:1" Storyboard.TargetProperty="Opacity"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </wpfsvl:SpectrumAnalyzer.Style>
                    </wpfsvl:SpectrumAnalyzer>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="5">
                        <Button Style="{StaticResource RoundButton}" Height="40" Width="40" Background="White" Command="{Binding MusicManager.Commands.GoBackward}">
                            <Grid>
                                <Viewbox Width="18" Height="18" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="-1,0,1,0">
                                    <Path Data="{StaticResource VectorFastBackward}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                                </Viewbox>
                            </Grid>
                        </Button>
                        <Button Style="{StaticResource RoundButton}" Height="55" Width="55" Command="{Binding MusicManager.Commands.TogglePlayPause}" Background="White" Margin="10,0,10,0">
                            <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Viewbox Width="22" Height="22" Stretch="Uniform" Margin="5,0,0,0">
                                    <Path Data="{StaticResource VectorPlay}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                                    <Viewbox.Resources>
                                        <Style TargetType="{x:Type Viewbox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="True">
                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                        <Style TargetType="Path">
                                            <Setter Property="Fill" Value="Black"/>
                                        </Style>
                                    </Viewbox.Resources>
                                </Viewbox>
                                <Viewbox Width="24" Height="24" Stretch="Uniform">
                                    <Path Data="{StaticResource VectorPause}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                                    <Viewbox.Resources>
                                        <Style TargetType="{x:Type Viewbox}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsPlaying}" Value="False">
                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                        <Style TargetType="Path">
                                            <Setter Property="Fill" Value="Black"/>
                                        </Style>
                                    </Viewbox.Resources>
                                </Viewbox>
                            </Grid>
                        </Button>
                        <Button Style="{StaticResource RoundButton}" Height="40" Width="40" Background="White" Command="{Binding MusicManager.Commands.GoForward}">
                            <Grid>
                                <Viewbox Width="18" Height="18" RenderOptions.BitmapScalingMode="HighQuality" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="1,0,-1,0">
                                    <Path Data="{StaticResource VectorFastForward}" Fill="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
                                </Viewbox>
                            </Grid>
                        </Button>
                    </StackPanel>
                </Grid>
                <Grid x:Name="BaseControlGrid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.Column="1" Margin="20,0,0,0">
                        <DockPanel.Resources>
                            <converter:VolumeToImage x:Key="VolumeToImage"/>
                        </DockPanel.Resources>
                        <Image Source="{Binding ElementName=volumeslider,Path=Value,Converter={StaticResource VolumeToImage}}" Width="24" Height="24">
                            <Image.InputBindings>
                                <MouseBinding MouseAction="LeftClick" Command="{Binding ToggleVolume}"/>
                            </Image.InputBindings>
                        </Image>
                        <Slider x:Name="volumeslider" Maximum="1" Minimum="0" IsMoveToPointEnabled="True" Style="{StaticResource VolumeSlider}" VerticalAlignment="Center" LargeChange="0.1" Value="{Binding MusicManager.CSCoreEngine.Volume}"/>
                    </DockPanel>
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.Resources>
                            <Style TargetType="Path" x:Key="TogglePath">
                                <Setter Property="Fill" Value="{StaticResource BlackBrush}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsChecked,RelativeSource={RelativeSource AncestorType=ToggleButton}}" Value="True">
                                        <Setter Property="Fill" Value="{StaticResource GrayBrush10}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </StackPanel.Resources>
                        <Button Width="24" Height="24" Focusable="False" Command="{Binding ToggleEqualizer}">
                            <Viewbox Width="14" Height="14" Stretch="Fill">
                                <Path Data="{StaticResource VectorEqualizer}" Fill="{StaticResource BlackBrush}"/>
                            </Viewbox>
                        </Button>
                        <ToggleButton Width="24" Height="24" Focusable="False" Margin="5,0,0,0" x:Name="tbtn_random" IsChecked="{Binding MusicManager.IsShuffleEnabled}">
                            <Viewbox>
                                <Path Data="{StaticResource VectorRandom}" Style="{StaticResource TogglePath}"/>
                            </Viewbox>
                        </ToggleButton>
                        <ToggleButton Width="24" Height="24" Focusable="False" Margin="5,0,0,0" x:Name="tbtn_repeat" IsChecked="{Binding MusicManager.IsLoopEnabled}">
                            <Viewbox Stretch="UniformToFill">
                                <Path Data="{StaticResource VectorRepeat}" Style="{StaticResource TogglePath}"/>
                            </Viewbox>
                        </ToggleButton>
                    </StackPanel>
                </Grid>
                <Grid Margin="0,8,0,5">
                    <Slider Width="{Binding ElementName=BaseControlGrid,Path=ActualWidth}" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" IsMoveToPointEnabled="True" Maximum="{Binding MusicManager.CSCoreEngine.TrackLength}" Value="{Binding MusicManager.CSCoreEngine.Position}" ex:SliderExtensions.MoveToPointOnDrag="True">
                        <Slider.Resources>
                            <ResourceDictionary>
                                <ResourceDictionary.MergedDictionaries>
                                    <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatSlider.xaml"></ResourceDictionary>
                                </ResourceDictionary.MergedDictionaries>
                            </ResourceDictionary>
                        </Slider.Resources>
                        <Slider.Style>
                            <Style TargetType="Slider" BasedOn="{StaticResource FlatSlider}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsLoading}" Value="True">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Slider.Style>
                    </Slider>
                    <controls:MetroProgressBar IsIndeterminate="{Binding MusicManager.CSCoreEngine.IsLoading}" Foreground="{StaticResource AccentColorBrush}">
                        <controls:MetroProgressBar.Style>
                            <Style TargetType="controls:MetroProgressBar">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MusicManager.CSCoreEngine.IsLoading}" Value="False">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </controls:MetroProgressBar.Style>
                    </controls:MetroProgressBar>
                </Grid>
            </StackPanel>
            <Grid Grid.Row="3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="5,0,5,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <ToggleButton IsChecked="{Binding MusicManager.FavoriteListIsSelected}" Style="{StaticResource FavoriteListToggleButton}" Width="15" Margin="0,0,5,0"/>
                    <ComboBox Grid.Column="1" ItemsSource="{Binding MusicManager.Playlists}" DisplayMemberPath="Name" SelectedItem="{Binding MusicManager.SelectedPlaylist}" VerticalAlignment="Center" Margin="0,0,3,0" Height="27">
                        <ComboBox.Triggers>
                            <EventTrigger RoutedEvent="ComboBox.SelectionChanged">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation From="0.5" To="1" Storyboard.TargetProperty="Opacity" Storyboard.Target="{Binding ElementName=listview}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ComboBox.Triggers>
                    </ComboBox>
                    <TextBlock Grid.Column="1" Text="{StaticResource Favorites}" VerticalAlignment="Center" Margin="8,0,0,0">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Setter Property="IsHitTestVisible" Value="False"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding MusicManager.FavoriteListIsSelected}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <Menu Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <ex:VectorMenuItem Style="{StaticResource VectorMenuItem}" VectorGraphic="{StaticResource VectorPlus}" VerticalAlignment="Center" Height="25" Background="{StaticResource WhiteBrush}">
                            <MenuItem Header="{DynamicResource NewPlaylist}" Command="{Binding AddNewPlaylist}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform">
                                        <Path Data="{StaticResource VectorAdd}" Fill="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding AddFilesToPlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="16">
                                        <Path Data="{StaticResource VectorAddFile}" Fill="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding AddFolderToPlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="16">
                                        <Path Data="{StaticResource VectorAddFolder}" Fill="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource RenamePlaylist}" Command="{Binding RenamePlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="16">
                                        <Path Data="{StaticResource VectorRename}" Stroke="{StaticResource BlackBrush}" Fill="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource RemovePlaylist}" Command="{Binding RemovePlaylist}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="13">
                                        <Path Data="{StaticResource VectorDelete}" Stroke="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource ReloadTrackInfo}" Command="{Binding ReloadTrackInformation}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform" Height="16" Width="13">
                                        <Path Data="{StaticResource VectorRefresh}" Fill="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="{DynamicResource RemoveTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem.Icon>
                                    <Viewbox Stretch="Uniform">
                                        <Path Data="{StaticResource VectorRemove}" Fill="{StaticResource BlackBrush}"/>
                                    </Viewbox>
                                </MenuItem.Icon>
                                <MenuItem Header="{DynamicResource RemoveMissingTracks}" Command="{Binding RemoveMissingTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.ContainsMissingTracks}"/>
                                <MenuItem Header="{DynamicResource RemoveDuplicates}" Command="{Binding RemoveDuplicateTracks}"/>
                                <Separator />
                                <MenuItem Header="{DynamicResource RemoveAllTracks}" Command="{Binding ClearSelectedPlaylist}"/>
                            </MenuItem>
                        </ex:VectorMenuItem>
                    </Menu>
                </Grid>
                <ListView ItemsSource="{Binding MusicManager.SelectedPlaylist.ViewSource}" SelectionMode="Extended" Grid.Row="1" Drop="listview_Drop" DragEnter="listview_DragEnter" x:Name="listview" SelectedItem="{Binding MusicManager.SelectedTrack}" ScrollViewer.VerticalScrollBarVisibility="Visible"
                          Margin="0,5,-1,0" HorizontalContentAlignment="Stretch" ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectionChanged="listview_SelectionChanged" IsSynchronizedWithCurrentItem="True" Style="{StaticResource VisualizingListView}" Background="{StaticResource WhiteBrush}">
                    <ListView.InputBindings>
                        <KeyBinding Key="Delete" Command="{Binding RemoveSelectedTracks}" CommandParameter="{Binding ElementName=listview,Path=SelectedItems}"/>
                        <KeyBinding Key="Enter" Command="{Binding MusicManager.Commands.PlaySelectedTrack}"/>
                        <KeyBinding Key="O" Modifiers="Alt" Command="{Binding MusicManager.Commands.OpenTrackLocation}"/>
                        <KeyBinding Key="Space" Command="{Binding MusicManager.Commands.TogglePlayPause}"/>
                        <KeyBinding Key="Q" Command="{Binding MusicManager.Commands.AddTracksToQueue}" CommandParameter="{Binding ElementName=listview,Path=SelectedItems}"/>
                        <KeyBinding Key="Q" Modifiers="Alt" Command="{Binding MusicManager.Commands.RemoveFromQueue}"/>
                        <KeyBinding Key="Q" Modifiers="Control" Command="{Binding OpenQueueManager}"/>
                        <KeyBinding Key="Insert" Command="{Binding AddFilesToPlaylist}"/>
                        <KeyBinding Key="Insert" Modifiers="Control" Command="{Binding AddFolderToPlaylist}"/>
                        <KeyBinding Key="F4" Command="{Binding OpenTrackInformation}"/>
                        <KeyBinding Key="F3" Command="{Binding OpenTagEditor}"/>
                    </ListView.InputBindings>
                    <ListView.Resources>
                        <converter:TrueFalseValueConverter x:Key="boldifplaying" FalseValue="Normal" TrueValue="Bold"/>
                        <ContextMenu x:Key="FileContextMenu" DataContext="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext}">
                            <MenuItem Header="{DynamicResource Play}" Command="{Binding MusicManager.Commands.PlaySelectedTrack}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="Enter"/>
                            <Separator />
                            <MenuItem Header="{DynamicResource AddTracks}" IsEnabled="{Binding MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding AddFilesToPlaylist}" InputGestureText="{DynamicResource Ins}">
                                    <MenuItem.Icon>
                                        <Viewbox Stretch="Uniform" Height="16" Width="16">
                                            <Path Fill="{StaticResource BlackBrush}" Data="{StaticResource VectorAddFile}"/>
                                        </Viewbox>
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding AddFolderToPlaylist}" InputGestureText="{DynamicResource CtrlIns}">
                                    <MenuItem.Icon>
                                        <Viewbox Stretch="Uniform" Height="16" Width="16">
                                            <Path Fill="{StaticResource BlackBrush}" Data="{StaticResource VectorAddFolder}"/>
                                        </Viewbox>
                                    </MenuItem.Icon>
                                </MenuItem>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource Queue}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}">
                                <MenuItem Header="{DynamicResource AddToQueue}" Command="{Binding MusicManager.Commands.AddTracksToQueue}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ListView},Path=SelectedItems}" InputGestureText="Q"/>
                                <MenuItem Header="{DynamicResource RemoveFromQueue}" Command="{Binding MusicManager.Commands.RemoveFromQueue}" InputGestureText="Alt+Q"/>
                                <MenuItem Header="{DynamicResource ClearQueue}" Command="{Binding MusicManager.Commands.ClearQueue}" IsEnabled="{Binding MusicManager.Queue.HasTracks}"/>
                                <Separator />
                                <MenuItem Header="{DynamicResource QueueManager}" Command="{Binding OpenQueueManager}" InputGestureText="{DynamicResource CtrlQ}"/>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource TrackInformation}" Command="{Binding OpenTrackInformation}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="F4"/>
                            <MenuItem Header="{DynamicResource TagEditor}" Command="{Binding OpenTagEditor}" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}" InputGestureText="F3"/>
                            <MenuItem Header="{DynamicResource FileLocation}" Command="{Binding MusicManager.Commands.OpenTrackLocation}" InputGestureText="Alt+O" IsEnabled="{Binding MusicManager.SelectedTrack.TrackExists}"/>
                            <Separator />
                            <MenuItem Header="{DynamicResource Remove}" Command="{Binding RemoveSelectedTracks}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=SelectedItems}" InputGestureText="{DynamicResource Del}"/>
                        </ContextMenu>
                        <ContextMenu x:Key="StreamContextMenu">
                            <MenuItem Header="{DynamicResource Play}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.PlaySelectedTrack}" InputGestureText="Enter"/>
                            <Separator />
                            <MenuItem Header="{DynamicResource AddTracks}" IsEnabled="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.SelectedPlaylist.CanEdit}">
                                <MenuItem Header="{DynamicResource AddFiles}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.AddFilesToPlaylist}" InputGestureText="{DynamicResource Ins}"/>
                                <MenuItem Header="{DynamicResource AddDirectories}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.AddFolderToPlaylist}" InputGestureText="{DynamicResource CtrlIns}"/>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource Queue}">
                                <MenuItem Header="{DynamicResource AddToQueue}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.AddTracksToQueue}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}},Path=SelectedItems}" InputGestureText="Q"/>
                                <MenuItem Header="{DynamicResource RemoveFromQueue}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.RemoveFromQueue}" InputGestureText="Alt+Q"/>
                                <MenuItem Header="{DynamicResource ClearQueue}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Commands.ClearQueue}" IsEnabled="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.MusicManager.Queue.HasTracks}"/>
                                <Separator />
                                <MenuItem Header="{DynamicResource QueueManager}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.OpenQueueManager}" InputGestureText="{DynamicResource CtrlQ}"/>
                            </MenuItem>
                            <Separator />
                            <MenuItem Header="{DynamicResource TrackInformation}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.OpenTrackInformation}" InputGestureText="F4"/>
                            <MenuItem Header="{DynamicResource OpenUrl}" Command="{Binding OpenLinkCommand}" InputGestureText="Alt+O"/>
                            <Separator />
                            <MenuItem Header="{DynamicResource Remove}" Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=DataContext.RemoveSelectedTracks}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListView}}, Path=SelectedItems}" InputGestureText="{DynamicResource Del}"/>
                        </ContextMenu>
                    </ListView.Resources>
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem" BasedOn="{StaticResource MetroListViewItem}">
                            <Setter Property="Padding" Value="0,4" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="Border.BorderThickness" Value="0,0,0,0.5" />
                            <Setter Property="Border.BorderBrush" Value="LightGray" />
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <ScaleTransform x:Name="transform" />
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding TrackType}" Value="File">
                                    <Setter Property="ContextMenu" Value="{StaticResource FileContextMenu}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TrackType}" Value="Stream">
                                    <Setter Property="ContextMenu" Value="{StaticResource StreamContextMenu}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding TrackExists}" Value="False">
                                    <Setter Property="Background" Value="{StaticResource GrayBrush8}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsRemoving}" Value="True">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ThicknessAnimation To="-40,0,40,0" Duration="0:0:0.5" Storyboard.TargetProperty="Margin"/>
                                                <DoubleAnimation To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsAdded}" Value="True">
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <ThicknessAnimation From="-40,0,40,0" To="0" Duration="0:0:0.5" Storyboard.TargetProperty="Margin" FillBehavior="Stop"/>
                                                <DoubleAnimation From="0" To="1" Duration="0:0:0.5" Storyboard.TargetProperty="Opacity" FillBehavior="Stop"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Grid Background="#01FFFFFF" Margin="4">
                                <Grid.InputBindings>
                                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.MusicManager.Commands.PlaySelectedTrack}"/>
                                </Grid.InputBindings>
                                <Grid.Resources>
                                    <converter:TrueFalseValueConverter TrueValue="2" FalseValue="0" x:Key="TrueFalseValueConverter"/>
                                </Grid.Resources>
                                <Border BorderBrush="{StaticResource LightColorBrush}" BorderThickness="{Binding IsOpened,Converter={StaticResource TrueFalseValueConverter}}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="-4">
                                    <StackPanel Orientation="Vertical" Margin="3">
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="50"/>
                                            </Grid.ColumnDefinitions>
                                            <StackPanel Visibility="{Binding QueueID,Converter={StaticResource CollapsedOnNullValue}}" Orientation="Horizontal">
                                                <TextBlock Text="["/>
                                                <TextBlock Text="{Binding QueueID}"/>
                                                <TextBlock Text="]"/>
                                            </StackPanel>
                                            <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" FontWeight="{Binding IsOpened,Converter={StaticResource boldifplaying}}" Grid.Column="1"/>
                                            <TextBlock Text="{Binding Duration}" TextAlignment="Right" x:Name="txt2" FontWeight="{Binding IsOpened,Converter={StaticResource boldifplaying}}" Grid.Column="2"/>
                                        </Grid>
                                        <DockPanel LastChildFill="False">
                                            <DockPanel.Resources>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="FontSize" Value="10"/>
                                                    <Setter Property="FontWeight" Value="{Binding IsOpened,Converter={StaticResource boldifplaying}}"/>
                                                </Style>
                                                <converter:TrueFalseValueConverter x:Key="TrueFalseValueConverter" FalseValue="#FFB4B4B4" TrueValue="White"/>
                                            </DockPanel.Resources>
                                            <ContentControl Content="{Binding}">
                                                <ContentControl.Resources>
                                                    <DataTemplate DataType="{x:Type track:StreamableBase}">
                                                        <StackPanel Orientation="Horizontal">
                                                            <Viewbox Height="12" Width="12" VerticalAlignment="Center">
                                                                <Path Data="{Binding ProviderVector}" Fill="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem},Path=Foreground}"/>
                                                            </Viewbox>
                                                            <TextBlock Text=" :: "/>
                                                            <TextBlock Text="{Binding kHz}"/>
                                                            <TextBlock Text=" kHz"/>
                                                            <TextBlock Text=" :: "/>
                                                            <TextBlock Text="{Binding Uploader}" MaxWidth="120" TextTrimming="CharacterEllipsis"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                    <DataTemplate DataType="{x:Type track:LocalTrack}">
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock Text="{Binding Extension}"/>
                                                            <TextBlock Text=" :: "/>
                                                            <TextBlock Text="{Binding kHz}"/>
                                                            <TextBlock Text=" kHz"/>
                                                            <TextBlock Text=" :: "/>
                                                            <TextBlock Text="{Binding kbps}"/>
                                                            <TextBlock Text=" kbps"/>
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ContentControl.Resources>
                                            </ContentControl>
                                            <ToggleButton IsChecked="{Binding IsFavorite}" Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem},Path=IsSelected,Converter={StaticResource TrueFalseValueConverter}}" Background="{StaticResource BlackBrush}" DockPanel.Dock="Right" Width="12" Height="12" Margin="0,4,0,0">
                                                <ToggleButton.Style>
                                                    <Style TargetType="ToggleButton" BasedOn="{StaticResource FavoriteToggleButton}">
                                                        <Setter Property="Visibility" Value="Hidden"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem},Path=IsSelected}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding IsFavorite}" Value="True">
                                                                <Setter Property="Visibility" Value="Visible"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </ToggleButton.Style>
                                            </ToggleButton>
                                        </DockPanel>
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
                <StackPanel Orientation="Vertical" Grid.Row="2" Margin="5,5,5,5">
                    <TextBox controls:TextBoxHelper.Watermark="{StaticResource Search}" Text="{Binding MusicManager.SelectedPlaylist.SearchText,UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
            </Grid>
        </Grid>
    </Grid>
</UserControl>